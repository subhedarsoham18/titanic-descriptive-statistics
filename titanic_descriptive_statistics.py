# -*- coding: utf-8 -*-
"""titanic-descriptive-statistics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/subhedarsoham18/51b66a4faad42c75ba48e424c59a80ce/titanic-descriptive-statistics.ipynb
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input/titanic-dataset'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

df = pd.read_csv("/content/Titanic-Dataset.csv")
df.head()

df.describe()

df.isnull().sum()

df = df.dropna()
df = df.drop(columns=["PassengerId", "SibSp", "Ticket", "Cabin", "Embarked", "Parch"])
df = df.rename(columns={'Pclass':'class'})
df['Age'] = df['Age'].astype(int)
df['Survived'] = df['Survived'].map({0: 'No', 1: 'Yes'}).astype(str)

df.head()
df.hist(figsize=(12, 8))
plt.tight_layout()
plt.show()

#Descriptive statistics
print("Summary of descriptive statistics:", df[['Age','Fare']].describe())
sns.boxplot(x=df['PassengerId'])
plt.show()

sns.histplot(df['Age'], bins=20, kde=True)
plt.title('Age Distribution')
plt.show()

sns.boxplot(x='Survived', y='Age', data=df)
plt.title('Age distribution by Survival')
plt.show()

ax = df['Sex'].value_counts().plot(kind='bar')
plt.title('Count of Passengers by Sex')
plt.xlabel('Sex')
plt.ylabel('Count')

for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x() + p.get_width() / 2, height + 1,
            int(height), ha='center', fontsize=12)

plt.show()

df = sns.load_dataset('iris')

